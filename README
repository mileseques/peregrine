Peregrine Cross-platform emulator for legacy Windows applications, built 
on QEMU and ReactOS. 

Alas, I talk about this as though I already had the thing finished, when 
in fact it is scarcely started. Ah well. I've been experimenting and 
doing research for weeks, and I've made enough design decisions that I 
can get started writing code that (theoretically) will go into an end 
product. So now it makes sense to set up a GitHub repository. 

Peregrine is going to be optimized for games, and is intended to support 
running applications built for Windows 9X and 2000-XP (that is, Windows 
95, Windows 98, Windows ME, Windows 2000, and Windows XP). It is 
targeted to be run on the following platforms:
*Android
*iOS (there may be some complications to this end, see below)
*Linux (likely Debian-based distros primarily)
*OS X
*Windows 

Additionally, an eventual goal of the project is to wrap Peregrine as a 
Libretro core (see http://www.libretro.com/), which would extend support 
to the considerable range of platforms supported by RetroArch (including 
a variety of video game consoles). 

While support for iOS itself is hardly ambitious compared to the other 
project goals, the iTunes App Store has been known to reject emulators 
in general. I'm not sure Apple has released an official statement 
regarding this behavior, but it's likely connected to objections over 
copyright infringement. There is also a prohibition on apps which can 
launch executable code in general. Even if rejected by the app store, 
though, Peregrine can still be installed on jailbroken iOS devices. 

The project will be built in C and C++ using Eclipse as the primary IDE 
and gcc as the compiler. 

The main components will include: 
*A feature-light fork of QEMU, which will emulate the processor(s) on 
non-x86 host machines and provide virtualized memory for the runtime 
environment. QEMU is built in C. More about QEMU at 
https://en.wikipedia.org/wiki/QEMU
*I had previously wanted to use a modified fork of ReacOS Kernel to
emulate kernel functionality. It would have to be modified heavily
in order to run in user space (i.e., not require that the user boot
their system into Peregrine). Turns out, the Wine Server performs a
very similar function to what I want and is already much closer than
the ReactOS kernel to this end. As I understand, ReactOS borrows a
lot of code from Wine (though not so much the other way), so these are
already connected.
*DOSBox. Probably the whole thing, it's incredibly portable. Legacy 
Windows emulation can surely be benefited from DOS emulation close at 
hand. Plus, it makes a decent processor emulator in a pinch. DOSBox is 
built in C. More about DOSBox at https://en.wikipedia.org/wiki/DOSBox 
*A central coordinating service built in C++, which will connect 
sub-components to each other and make them work together. It will also 
probably be in charge of handling user IO (e.g., sending keyboard events 
into the application and displaying the graphics), emulating the file 
system (I have ideas about how to do this that would be better in our 
case than a virtual hard drive), and making/parsing code packages that 
can be transported between different instances of Peregrine.
*A GUI, probably built in C++ with the QT framework. I think it would 
be fun if it were a set of nested menus designed to resemble the 
Windows 9X start menu. 

There are also a number of reimplimentations of Windows services 
packaged with ReactOS that will surely come in handy. I haven't looked 
through all of it yet, but there appears to be DirectX -- it will be 
tremendously convenient if we can run that natively and prepackage it 
with Peregrine instead of requiring users to download it seperately. We 
might also look into using Mono to natively run the CLR. This could 
represent a significant speed boost for .NET programs on non-x86 host 
platforms. Similarly, we may want to include a Java virtual machine 
running in native code rather than emulation (there are a variety of 
open-source choices), and perhaps FireFox to wrap legacy Java applets. 

After a working version of Peregrine exists with a respectable range of 
support, it is my intention to create a branch of Peregrine for Windows 
called Kestrel. Because Windows only supports x86 and AMD64 
architectures, Kestrel will remove QEMU and the ReactOS kernel (or at 
least favor their disuse), acting as a compatibility layer instead of a 
full emulator. This should represent a significant performance gain over 
Peregrine on Windows. Kestrel will be extended to other platforms that 
run on x86 compatible architectures (namely, Linux and OS X), and if 
successful, integrated into the mainline of Peregrine (at least for 
these platforms). 

Other possible optimizations that may be useful could include support 
for aot recompilation of Windows binaries, either as Tiny Code 
intermediary bytecode as used and interpreted by QEMU, or as native 
binaries for supported architectures. If this is a viable strategy, then 
a potential fork of Peregrine could be a suite of tools for porting 
individual Windows binaries to other platforms -- although this may be 
tricky to manage with Peregrine's explicitly copyleft license. 

It also may be entirely unnecessary to use the ReactOS kernel, Peregrine 
may be able to rely instead on the host kernel -- though this may create 
a runtime state inconsistent with Windows it's possible that this would 
have no adverse effects. Wine, after all, is able to run Windows 
binaries, (as far as I'm aware) without emulating the Windows kernel. 
I'll have to explore this vein. 

An important feature of Peregrine will be its code packages. These are 
intended to give Peregrine similar functionality to a traditional game 
emultor that uses ROMs, i.e. there is a single file that is loaded into 
the program and the game runs immediately from there, without any 
installation. A package will consist of a description of various 
settings for the game, e.g. how controls should be emulated in various 
environments, what dependencies the game needs, what executables to run 
at "launch", and any save or settings files that should be stored 
locally instead of on the package. Then, there will be a SQLite database 
describing the contents of a minimal file system featuring only the game 
files. If necessary, the package will also include an image of the game 
disc, which will then be emulated (though this should be avoided if 
possible as this will greatly inflate the size of the package). 
Theoretically, such a package could be generated by loading and running 
installation executables into a Peregrine session, then the package can 
be transported between any other Peregrine on any platform and run 
immediately as though the game had been installed there. It seems the 
bulk of a package would be binary code, so I'm not sure how effective 
compression would be, but it's a consideration worth investigating. 

There will be a variety of strategies used to emulate mouse behavior on 
platforms that do not rely on the use of a mouse (namely mobile devices 
with touch screens or game consoles with only controllers). Which 
strategy will be used can be defined and customized by individual game 
packages based on how the game works and what its needs are.

The project is named in reference to the peregrine falcon. I came up 
with the name while trying to find some pronouncable variation of "Para 
Win 9X", as in "Paravirtual Windows 95/98". Be glad I didn't go with a 
derivative of "periwinkle," because I was seriously considering it. I 
figure an animal mascot will make the project more amiable to the open 
source community, a bird of prey with a cool name and a reputation for 
speed will make the end product more appealing to the gaming community, 
and there are surprisingly few things called "Peregrine" in general, so 
less brand confusion with all the advantages of an English word. Plus, 
the word "peregrine" itself means "traveling, migratory" or some such, 
which I guess sort of makes sense for an emulator with portable packages.

